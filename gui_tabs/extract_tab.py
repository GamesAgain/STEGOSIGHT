"""Extract tab implementation for the STEGOSIGHT GUI."""

from __future__ import annotations

from pathlib import Path
from typing import Dict, Optional

from PyQt5.QtCore import Qt
from PyQt5.QtGui import QPixmap
from PyQt5.QtWidgets import (
    QFileDialog,
    QGroupBox,
    QHBoxLayout,
    QLabel,
    QLineEdit,
    QMessageBox,
    QPushButton,
    QScrollArea,
    QSplitter,
    QTextEdit,
    QVBoxLayout,
    QWidget,
    QComboBox,
    QCheckBox,
)

from .common_widgets import InfoPanel


class ExtractTab(QWidget):
    """UI for the *Extract* functionality."""

    def __init__(self, parent=None) -> None:
        super().__init__(parent)
        self.parent_window = parent

        self.stego_path: Optional[Path] = None
        self.extracted_data: Optional[bytes] = None

        self._init_ui()

    # ------------------------------------------------------------------
    def _init_ui(self) -> None:
        main_layout = QVBoxLayout(self)
        splitter = QSplitter(Qt.Horizontal)

        left_scroll = QScrollArea()
        left_scroll.setWidgetResizable(True)
        left_widget = QWidget()
        left_layout = QVBoxLayout(left_widget)

        left_layout.addWidget(self._create_file_group())
        left_layout.addWidget(self._create_method_group())
        left_layout.addWidget(self._create_decryption_group())
        left_layout.addWidget(self._create_result_group())
        left_layout.addStretch()

        left_scroll.setWidget(left_widget)
        splitter.addWidget(left_scroll)

        right_widget = QWidget()
        right_layout = QVBoxLayout(right_widget)
        right_layout.addWidget(self._create_preview_group())
        right_layout.addWidget(self._create_details_group())
        right_layout.addStretch()
        splitter.addWidget(right_widget)

        splitter.setStretchFactor(0, 50)
        splitter.setStretchFactor(1, 50)
        main_layout.addWidget(splitter)

        self.action_btn = QPushButton("üîì ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•")
        self.action_btn.setObjectName("actionButton")
        self.action_btn.clicked.connect(self._start_extract)
        main_layout.addWidget(self.action_btn, 0, Qt.AlignRight)

    def _create_file_group(self) -> QGroupBox:
        group = QGroupBox("1. ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ã‡πà‡∏≠‡∏ô‡∏≠‡∏¢‡∏π‡πà")
        layout = QVBoxLayout(group)

        file_row = QHBoxLayout()
        self.file_input = QLineEdit()
        self.file_input.setPlaceholderText("‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•...")
        self.file_input.setReadOnly(True)
        browse_btn = QPushButton("‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÑ‡∏ü‡∏•‡πå")
        browse_btn.clicked.connect(self._browse_file)
        file_row.addWidget(self.file_input)
        file_row.addWidget(browse_btn)
        layout.addLayout(file_row)

        info = QLabel("‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏µ‡πà‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÇ‡∏î‡∏¢ STEGOSIGHT ‡∏ó‡∏∏‡∏Å‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó")
        info.setObjectName("infoBox")
        info.setWordWrap(True)
        layout.addWidget(info)
        return group

    def _create_method_group(self) -> QGroupBox:
        group = QGroupBox("2. ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ß‡∏¥‡∏ò‡∏µ‡∏Å‡∏≤‡∏£‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡∏ã‡πà‡∏≠‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•")
        layout = QVBoxLayout(group)
        self.method_combo = QComboBox()
        self.method_combo.addItems([
            "Adaptive (‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥)",
            "LSB Matching",
            "PVD",
            "DCT (JPEG)",
        ])
        layout.addWidget(self.method_combo)

        info = QLabel('‡πÄ‡∏•‡∏∑‡∏≠‡∏Å "Adaptive" ‡∏´‡∏≤‡∏Å‡πÑ‡∏°‡πà‡∏ó‡∏£‡∏≤‡∏ö‡∏ß‡∏¥‡∏ò‡∏µ‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ')
        info.setObjectName("infoBox")
        info.setWordWrap(True)
        layout.addWidget(info)
        return group

    def _create_decryption_group(self) -> QGroupBox:
        group = QGroupBox("3. ‡∏Å‡∏≤‡∏£‡∏ñ‡∏≠‡∏î‡∏£‡∏´‡∏±‡∏™ (Decryption)")
        layout = QVBoxLayout(group)

        self.encrypted_cb = QCheckBox("‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ñ‡∏π‡∏Å‡πÄ‡∏Ç‡πâ‡∏≤‡∏£‡∏´‡∏±‡∏™ (‡∏ï‡πâ‡∏≠‡∏á‡πÉ‡∏ä‡πâ‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô)")
        self.encrypted_cb.setChecked(True)
        layout.addWidget(self.encrypted_cb)

        pwd_row = QHBoxLayout()
        pwd_row.addWidget(QLabel("‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô:"))
        self.password_input = QLineEdit()
        self.password_input.setEchoMode(QLineEdit.Password)
        self.password_input.setPlaceholderText("‡∏Å‡∏£‡∏≠‡∏Å‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô...")
        pwd_row.addWidget(self.password_input)
        layout.addLayout(pwd_row)

        self.encrypted_cb.toggled.connect(self.password_input.setEnabled)
        return group

    def _create_result_group(self) -> QGroupBox:
        group = QGroupBox("4. ‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå")
        layout = QVBoxLayout(group)

        self.result_text = QTextEdit()
        self.result_text.setPlaceholderText("‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏î‡∏∂‡∏á‡∏≠‡∏≠‡∏Å‡∏°‡∏≤‡∏à‡∏∞‡πÅ‡∏™‡∏î‡∏á‡∏ó‡∏µ‡πà‡∏ô‡∏µ‡πà...")
        self.result_text.setReadOnly(True)
        layout.addWidget(self.result_text)

        save_btn = QPushButton("üíæ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÄ‡∏õ‡πá‡∏ô‡πÑ‡∏ü‡∏•‡πå")
        save_btn.clicked.connect(self._save_extracted)
        layout.addWidget(save_btn, 0, Qt.AlignRight)
        return group

    def _create_preview_group(self) -> QGroupBox:
        group = QGroupBox("‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡πÑ‡∏ü‡∏•‡πå")
        layout = QVBoxLayout(group)

        self.preview_label = QLabel("‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÑ‡∏ü‡∏•‡πå")
        self.preview_label.setAlignment(Qt.AlignCenter)
        self.preview_label.setMinimumHeight(200)
        self.preview_label.setObjectName("previewArea")
        layout.addWidget(self.preview_label)

        panel, labels = self._create_info_panel(["‡∏ä‡∏∑‡πà‡∏≠‡πÑ‡∏ü‡∏•‡πå", "‡∏Ç‡∏ô‡∏≤‡∏î", "‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞"])
        self.file_info_panel = panel
        self.info_labels = labels
        layout.addWidget(panel)
        return group

    def _create_details_group(self) -> QGroupBox:
        group = QGroupBox("‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏î‡∏∂‡∏á")
        layout = QVBoxLayout(group)
        panel, labels = self._create_info_panel(["‡∏ß‡∏¥‡∏ò‡∏µ‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏û‡∏ö", "‡∏Ç‡∏ô‡∏≤‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•", "‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡πâ‡∏≤‡∏£‡∏´‡∏±‡∏™"])
        self.details_panel = panel
        self.details_labels = labels
        layout.addWidget(panel)
        return group

    def _create_info_panel(self, labels):
        panel = InfoPanel(labels)
        return panel, panel.value_labels

    # ------------------------------------------------------------------
    def _browse_file(self) -> None:
        filename, _ = QFileDialog.getOpenFileName(self, "‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏µ‡πà‡∏ã‡πà‡∏≠‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•", "", "All Files (*.*)")
        if filename:
            self.stego_path = Path(filename)
            self.file_input.setText(filename)
            self._update_preview()

    def _update_preview(self) -> None:
        if not self.stego_path:
            return
        self.info_labels["‡∏ä‡∏∑‡πà‡∏≠‡πÑ‡∏ü‡∏•‡πå"].setText(self.stego_path.name)
        size_kb = self.stego_path.stat().st_size / 1024
        self.info_labels["‡∏Ç‡∏ô‡∏≤‡∏î"].setText(f"{size_kb:.2f} KB")
        self.info_labels["‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞"].setText("‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö")
        self.info_labels["‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞"].setStyleSheet("font-weight: bold; color: #1E88E5;")

        pixmap = QPixmap(str(self.stego_path))
        if not pixmap.isNull():
            self.preview_label.setPixmap(
                pixmap.scaled(
                    self.preview_label.size(), Qt.KeepAspectRatio, Qt.SmoothTransformation
                )
            )
        else:
            self.preview_label.setText(f"‡πÑ‡∏ü‡∏•‡πå: {self.stego_path.name}\n‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó: {self.stego_path.suffix}")

    def _start_extract(self) -> None:
        if not self.stego_path:
            QMessageBox.warning(self, "‡∏Ñ‡∏≥‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô", "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÑ‡∏ü‡∏•‡πå")
            return

        password: Optional[str] = None
        if self.encrypted_cb.isChecked():
            password = self.password_input.text()
            if not password:
                QMessageBox.warning(self, "‡∏Ñ‡∏≥‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô", "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô")
                return

        method_map = {0: "adaptive", 1: "lsb", 2: "pvd", 3: "dct"}
        method = method_map.get(self.method_combo.currentIndex(), "adaptive")

        params = {
            "stego_path": str(self.stego_path),
            "password": password,
            "method": method,
        }

        self._set_busy(True)
        self.parent_window.start_worker(
            "extract",
            params,
            on_result=self._on_extract_result,
            on_error=self._on_worker_error,
            on_finished=self._on_worker_finished,
        )

    def _on_extract_result(self, result: Dict[str, object]) -> None:
        self.extracted_data = result.get("data") if isinstance(result, dict) else None
        method = result.get("method", "adaptive") if isinstance(result, dict) else "adaptive"
        if isinstance(self.extracted_data, (bytes, bytearray)):
            try:
                decoded = self.extracted_data.decode("utf-8")
                self.result_text.setPlainText(decoded)
            except Exception:
                self.result_text.setPlainText(
                    f"‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏ö‡∏ô‡∏≤‡∏£‡∏µ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à ({len(self.extracted_data)} bytes)\n\n‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÄ‡∏õ‡πá‡∏ô‡πÑ‡∏ü‡∏•‡πå"
                )
            self.details_labels["‡∏Ç‡∏ô‡∏≤‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•"].setText(f"{len(self.extracted_data)} bytes")
        else:
            self.result_text.setPlainText("‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏≠‡πà‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏î‡∏∂‡∏á‡∏°‡∏≤‡πÑ‡∏î‡πâ")
            self.details_labels["‡∏Ç‡∏ô‡∏≤‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•"].setText("‚Äî")

        self.details_labels["‡∏ß‡∏¥‡∏ò‡∏µ‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏û‡∏ö"].setText(method.upper())
        self.details_labels["‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡πâ‡∏≤‡∏£‡∏´‡∏±‡∏™"].setText(
            "‡∏ñ‡∏≠‡∏î‡∏£‡∏´‡∏±‡∏™‡πÅ‡∏•‡πâ‡∏ß" if self.encrypted_cb.isChecked() else "‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡πâ‡∏≤‡∏£‡∏´‡∏±‡∏™"
        )
        QMessageBox.information(self, "‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à", "‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!")

    def _save_extracted(self) -> None:
        if not isinstance(self.extracted_data, (bytes, bytearray)):
            QMessageBox.warning(self, "‡∏Ñ‡∏≥‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô", "‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏î‡∏∂‡∏á‡∏≠‡∏≠‡∏Å‡∏°‡∏≤")
            return
        filename, _ = QFileDialog.getSaveFileName(self, "‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÑ‡∏ü‡∏•‡πå", "", "All Files (*.*)")
        if filename:
            Path(filename).write_bytes(self.extracted_data)
            QMessageBox.information(self, "‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à", f"‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÑ‡∏ü‡∏•‡πå‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: {filename}")

    def _on_worker_error(self, error: str) -> None:
        QMessageBox.critical(self, "‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î", f"‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î:\n{error}")
        self._set_busy(False)

    def _on_worker_finished(self) -> None:
        self._set_busy(False)

    def _set_busy(self, busy: bool) -> None:
        self.action_btn.setEnabled(not busy)
