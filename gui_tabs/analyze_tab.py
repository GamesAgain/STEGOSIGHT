"""Analyze tab implementation for the STEGOSIGHT GUI."""

from __future__ import annotations

from pathlib import Path
from typing import Dict, List, Optional

from PyQt5.QtCore import Qt
from PyQt5.QtGui import QPixmap
from PyQt5.QtWidgets import (
    QFileDialog,
    QGroupBox,
    QHBoxLayout,
    QLabel,
    QLineEdit,
    QMessageBox,
    QPushButton,
    QScrollArea,
    QVBoxLayout,
    QWidget,
    QCheckBox,
)

from .common_widgets import InfoPanel, RiskScoreWidget


class AnalyzeTab(QWidget):
    """UI for the *Analyze* functionality."""

    def __init__(self, parent=None) -> None:
        super().__init__(parent)
        self.parent_window = parent
        self.file_path: Optional[Path] = None
        self._init_ui()

    def _init_ui(self) -> None:
        main_layout = QVBoxLayout(self)
        scroll = QScrollArea()
        scroll.setWidgetResizable(True)

        container = QWidget()
        container_layout = QVBoxLayout(container)

        top_widget = QWidget()
        top_layout = QHBoxLayout(top_widget)

        left_widget = QWidget()
        left_layout = QVBoxLayout(left_widget)
        left_layout.addWidget(self._create_file_group())
        left_layout.addWidget(self._create_methods_group())
        left_layout.addWidget(self._create_options_group())
        left_layout.addStretch()
        top_layout.addWidget(left_widget, 2)

        right_widget = QWidget()
        right_layout = QVBoxLayout(right_widget)
        right_layout.addWidget(self._create_preview_group())
        right_layout.addStretch()
        top_layout.addWidget(right_widget, 1)

        container_layout.addWidget(top_widget)

        action_layout = QHBoxLayout()
        action_layout.addStretch()
        self.action_btn = QPushButton("üîç ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡πÑ‡∏ü‡∏•‡πå")
        self.action_btn.setObjectName("actionButton")
        self.action_btn.clicked.connect(self._start_analysis)
        action_layout.addWidget(self.action_btn)
        container_layout.addLayout(action_layout)

        results_group = QGroupBox("‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå")
        results_layout = QVBoxLayout(results_group)
        self.risk_score_widget = RiskScoreWidget()
        results_layout.addWidget(self.risk_score_widget)

        details_panel, labels = self._create_info_panel(
            ["üìä Chi-Square Test", "üîç ELA Analysis", "üìà Histogram", "üéØ ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏°‡∏±‡πà‡∏ô‡πÉ‡∏à"]
        )
        self.details_panel = details_panel
        self.details_labels = labels
        results_layout.addWidget(details_panel)

        self.recommendation_box = self._create_info_box(
            "<b>‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥:</b> ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÑ‡∏ü‡∏•‡πå‡πÅ‡∏•‡∏∞‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏î‡∏π‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå"
        )
        results_layout.addWidget(self.recommendation_box)

        container_layout.addWidget(results_group)

        scroll.setWidget(container)
        main_layout.addWidget(scroll)

    def _create_file_group(self) -> QGroupBox:
        group = QGroupBox("1. ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÑ‡∏ü‡∏•‡πå‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå")
        layout = QVBoxLayout(group)
        row = QHBoxLayout()
        self.file_input = QLineEdit()
        self.file_input.setPlaceholderText("‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÑ‡∏ü‡∏•‡πå‡∏†‡∏≤‡∏û‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå...")
        self.file_input.setReadOnly(True)
        browse_btn = QPushButton("‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÑ‡∏ü‡∏•‡πå")
        browse_btn.clicked.connect(self._browse_file)
        row.addWidget(self.file_input)
        row.addWidget(browse_btn)
        layout.addLayout(row)
        layout.addWidget(self._create_info_box("‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö: PNG, JPEG, BMP"))
        return group

    def _create_methods_group(self) -> QGroupBox:
        group = QGroupBox("2. ‡∏ß‡∏¥‡∏ò‡∏µ‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå")
        layout = QVBoxLayout(group)
        self.chi_square_cb = QCheckBox("Chi-Square Attack - ‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö LSB")
        self.chi_square_cb.setChecked(True)
        self.ela_cb = QCheckBox("Error Level Analysis (ELA) - ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå JPEG")
        self.ela_cb.setChecked(True)
        self.histogram_cb = QCheckBox("Histogram Analysis - ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏™‡∏µ")
        self.histogram_cb.setChecked(True)
        self.ml_cb = QCheckBox("Machine Learning - AI ‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö (‡∏ó‡∏î‡∏•‡∏≠‡∏á)")
        layout.addWidget(self.chi_square_cb)
        layout.addWidget(self.ela_cb)
        layout.addWidget(self.histogram_cb)
        layout.addWidget(self.ml_cb)
        layout.addWidget(self._create_info_box("‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏´‡∏•‡∏≤‡∏¢‡∏ß‡∏¥‡∏ò‡∏µ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏ó‡∏µ‡πà‡πÅ‡∏°‡πà‡∏ô‡∏¢‡∏≥"))
        return group

    def _create_options_group(self) -> QGroupBox:
        group = QGroupBox("3. ‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°")
        layout = QVBoxLayout(group)
        self.compare_checkbox = QCheckBox("‡πÅ‡∏™‡∏î‡∏á‡∏†‡∏≤‡∏û‡πÄ‡∏õ‡∏£‡∏µ‡∏¢‡∏ö‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö‡πÅ‡∏ö‡∏ö‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î")
        self.pdf_checkbox = QCheckBox("‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô PDF")
        self.reference_checkbox = QCheckBox("‡πÄ‡∏õ‡∏£‡∏µ‡∏¢‡∏ö‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö‡∏Å‡∏±‡∏ö‡πÑ‡∏ü‡∏•‡πå‡∏ï‡πâ‡∏ô‡∏â‡∏ö‡∏±‡∏ö (‡∏ñ‡πâ‡∏≤‡∏°‡∏µ)")
        layout.addWidget(self.compare_checkbox)
        layout.addWidget(self.pdf_checkbox)
        layout.addWidget(self.reference_checkbox)
        return group

    def _create_preview_group(self) -> QGroupBox:
        group = QGroupBox("‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡πÑ‡∏ü‡∏•‡πå")
        layout = QVBoxLayout(group)
        self.preview_label = QLabel("‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÑ‡∏ü‡∏•‡πå")
        self.preview_label.setAlignment(Qt.AlignCenter)
        self.preview_label.setMinimumHeight(300)
        self.preview_label.setObjectName("previewArea")
        layout.addWidget(self.preview_label)
        return group

    def _create_info_box(self, text: str) -> QLabel:
        info = QLabel(text)
        info.setWordWrap(True)
        info.setObjectName("infoBox")
        return info

    def _create_info_panel(self, labels):
        panel = InfoPanel(labels)
        return panel, panel.value_labels

    # ------------------------------------------------------------------
    def _browse_file(self) -> None:
        filename, _ = QFileDialog.getOpenFileName(
            self,
            "‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÑ‡∏ü‡∏•‡πå‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå",
            "",
            "Image Files (*.png *.jpg *.jpeg *.bmp);;All Files (*.*)",
        )
        if filename:
            self.file_path = Path(filename)
            self.file_input.setText(filename)
            pixmap = QPixmap(filename)
            if not pixmap.isNull():
                self.preview_label.setPixmap(
                    pixmap.scaled(
                        self.preview_label.size(), Qt.KeepAspectRatio, Qt.SmoothTransformation
                    )
                )
            else:
                self.preview_label.setText(f"‡πÑ‡∏ü‡∏•‡πå: {Path(filename).name}")

    def _start_analysis(self) -> None:
        if not self.file_path:
            QMessageBox.warning(self, "‡∏Ñ‡∏≥‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô", "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏µ‡πà‡∏à‡∏∞‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå")
            return

        methods: List[str] = []
        if self.chi_square_cb.isChecked():
            methods.append("chi-square")
        if self.ela_cb.isChecked():
            methods.append("ela")
        if self.histogram_cb.isChecked():
            methods.append("histogram")
        if self.ml_cb.isChecked():
            methods.append("ml")
        if not methods:
            methods = ["all"]

        params = {
            "file_path": str(self.file_path),
            "methods": methods,
        }

        self._set_busy(True)
        self.parent_window.start_worker(
            "analyze",
            params,
            on_result=self._on_analysis_result,
            on_error=self._on_worker_error,
            on_finished=self._on_worker_finished,
        )

    def _on_analysis_result(self, result: Dict[str, object]) -> None:
        score = int(result.get("score", 42))
        level = str(result.get("level", "MEDIUM"))
        details = result.get("details", {}) if isinstance(result, dict) else {}

        color = "#4CAF50"
        if score >= 60:
            color = "#F44336"
        elif score >= 30:
            color = "#FF9800"

        description = ""
        if isinstance(details, dict):
            chi = details.get("chi_square", "‚Äî")
            ela = details.get("ela", "‚Äî")
            hist = details.get("histogram", "‚Äî")
            description = f"Chi-Square: {chi}\nELA: {ela}\nHistogram: {hist}"
            self.details_labels["üìä Chi-Square Test"].setText(str(chi))
            self.details_labels["üîç ELA Analysis"].setText(str(ela))
            self.details_labels["üìà Histogram"].setText(str(hist))
            confidence = details.get("confidence", "‚Äî")
            self.details_labels["üéØ ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏°‡∏±‡πà‡∏ô‡πÉ‡∏à"].setText(str(confidence))
        else:
            for key in self.details_labels:
                self.details_labels[key].setText("‚Äî")

        self.risk_score_widget.set_score(score, level.upper(), description, color)

        if score >= 60:
            advice = "<b>‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥:</b> ‡∏û‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏™‡∏µ‡πà‡∏¢‡∏á‡∏™‡∏π‡∏á ‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡πÉ‡∏´‡πâ‡πÉ‡∏ä‡πâ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô Neutralize"
        elif score >= 30:
            advice = "<b>‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥:</b> ‡∏û‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏™‡∏µ‡πà‡∏¢‡∏á‡∏õ‡∏≤‡∏ô‡∏Å‡∏•‡∏≤‡∏á ‡∏Ñ‡∏ß‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°"
        else:
            advice = "<b>‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥:</b> ‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏™‡∏µ‡πà‡∏¢‡∏á‡∏ï‡πà‡∏≥ ‡πÅ‡∏ï‡πà‡∏Ñ‡∏ß‡∏£‡πÄ‡∏Å‡πá‡∏ö‡πÑ‡∏ü‡∏•‡πå‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏£‡∏∞‡∏°‡∏±‡∏î‡∏£‡∏∞‡∏ß‡∏±‡∏á"
        self.recommendation_box.setText(advice)

    def _on_worker_error(self, error: str) -> None:
        QMessageBox.critical(self, "‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î", f"‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß:\n{error}")
        self._set_busy(False)

    def _on_worker_finished(self) -> None:
        self._set_busy(False)

    def _set_busy(self, busy: bool) -> None:
        self.action_btn.setEnabled(not busy)
