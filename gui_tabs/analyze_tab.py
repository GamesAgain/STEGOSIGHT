"""Analyze tab implementation for the STEGOSIGHT GUI."""

from __future__ import annotations

import datetime
from pathlib import Path
from typing import Dict, Iterable, List, Optional, Tuple

from PyQt5.QtCore import Qt
from PyQt5.QtGui import QPixmap
from PyQt5.QtWidgets import (
    QFileDialog,
    QFrame,
    QGroupBox,
    QHBoxLayout,
    QHeaderView,
    QLabel,
    QLineEdit,
    QMessageBox,
    QPushButton,
    QPlainTextEdit,
    QScrollArea,
    QTableWidget,
    QTableWidgetItem,
    QVBoxLayout,
    QWidget,
    QCheckBox,
)

from PIL import Image

from .common_widgets import RiskScoreWidget
from utils.logger import setup_logger


class AnalyzeTab(QWidget):
    """UI for the *Analyze* functionality."""

    def __init__(self, parent=None) -> None:
        super().__init__(parent)
        self.parent_window = parent
        self.file_path: Optional[Path] = None
        self.selected_media_type: str = "image"
        self.media_type_buttons: Dict[str, QPushButton] = {}
        self.active_checks: Dict[str, bool] = {
            "statistical": True,
            "structural": True,
            "metadata": True,
        }
        self.media_type_supports = {
            "image": "‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö: PNG, JPEG, BMP",
            "audio": "‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö: WAV, MP3, FLAC",
            "video": "‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö: MP4, AVI, MKV, MOV",
        }
        self.media_type_filters = {
            "image": "‡πÑ‡∏ü‡∏•‡πå‡∏†‡∏≤‡∏û (*.png *.jpg *.jpeg *.bmp);;All Files (*.*)",
            "audio": "‡πÑ‡∏ü‡∏•‡πå‡πÄ‡∏™‡∏µ‡∏¢‡∏á (*.wav *.mp3 *.flac);;All Files (*.*)",
            "video": "‡πÑ‡∏ü‡∏•‡πå‡∏ß‡∏¥‡∏î‡∏µ‡πÇ‡∏≠ (*.mp4 *.avi *.mkv *.mov);;All Files (*.*)",
        }
        self.media_type_placeholders = {
            "image": "‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÑ‡∏ü‡∏•‡πå‡∏†‡∏≤‡∏û...",
            "audio": "‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÑ‡∏ü‡∏•‡πå‡πÄ‡∏™‡∏µ‡∏¢‡∏á...",
            "video": "‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÑ‡∏ü‡∏•‡πå‡∏ß‡∏¥‡∏î‡∏µ‡πÇ‡∏≠...",
        }

        self.logger = setup_logger(__name__)
        self._init_ui()

    # ------------------------------------------------------------------
    # UI construction
    # ------------------------------------------------------------------
    def _init_ui(self) -> None:
        main_layout = QVBoxLayout(self)
        scroll = QScrollArea()
        scroll.setWidgetResizable(True)

        container = QWidget()
        container_layout = QVBoxLayout(container)
        container_layout.setContentsMargins(16, 16, 16, 16)
        container_layout.setSpacing(18)

        top_widget = QWidget()
        top_layout = QHBoxLayout(top_widget)
        top_layout.setSpacing(18)

        left_widget = QWidget()
        left_layout = QVBoxLayout(left_widget)
        left_layout.setSpacing(16)
        left_layout.addWidget(self._create_file_group())
        left_layout.addWidget(self._create_settings_group())
        left_layout.addWidget(self._create_action_section())
        left_layout.addStretch()
        top_layout.addWidget(left_widget, 4)

        right_widget = QWidget()
        right_layout = QVBoxLayout(right_widget)
        right_layout.setSpacing(16)
        right_layout.addWidget(self._create_log_group())
        right_layout.addWidget(self._create_summary_group())
        top_layout.addWidget(right_widget, 6)

        container_layout.addWidget(top_widget)

        scroll.setWidget(container)
        main_layout.addWidget(scroll)

    def _create_file_group(self) -> QGroupBox:
        group = QGroupBox("1. ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÑ‡∏ü‡∏•‡πå‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå")
        layout = QVBoxLayout(group)
        layout.setSpacing(12)

        type_row = QHBoxLayout()
        type_row.setSpacing(8)
        type_row.addWidget(QLabel("‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏™‡∏∑‡πà‡∏≠:"))
        for key, label in (
            ("image", "üñºÔ∏è ‡πÑ‡∏ü‡∏•‡πå‡∏†‡∏≤‡∏û"),
            ("audio", "üéß ‡πÑ‡∏ü‡∏•‡πå‡πÄ‡∏™‡∏µ‡∏¢‡∏á"),
            ("video", "üéûÔ∏è ‡πÑ‡∏ü‡∏•‡πå‡∏ß‡∏¥‡∏î‡∏µ‡πÇ‡∏≠"),
        ):
            button = QPushButton(label)
            button.setCheckable(True)
            button.setObjectName("toggleButton")
            button.setChecked(key == self.selected_media_type)
            button.clicked.connect(lambda _, media=key: self._set_media_type(media))
            self.media_type_buttons[key] = button
            type_row.addWidget(button)

        type_row.addStretch()
        layout.addLayout(type_row)

        file_row = QHBoxLayout()
        file_row.setSpacing(8)
        self.file_input = QLineEdit()
        self.file_input.setPlaceholderText(self.media_type_placeholders[self.selected_media_type])
        self.file_input.setReadOnly(True)
        browse_btn = QPushButton("‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÑ‡∏ü‡∏•‡πå...")
        browse_btn.clicked.connect(self._browse_file)
        file_row.addWidget(self.file_input)
        file_row.addWidget(browse_btn)
        layout.addLayout(file_row)

        self.support_label = self._create_info_label(
            self.media_type_supports[self.selected_media_type]
        )
        layout.addWidget(self.support_label)

        self._set_media_type(self.selected_media_type)
        return group

    def _create_settings_group(self) -> QGroupBox:
        group = QGroupBox("2. ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå")
        layout = QVBoxLayout(group)
        layout.setSpacing(10)

        self.statistical_cb = QCheckBox("‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏ó‡∏≤‡∏á‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥ (Statistical Analysis)")
        self.statistical_cb.setChecked(True)
        self.structural_cb = QCheckBox("‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡πÇ‡∏Ñ‡∏£‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÑ‡∏ü‡∏•‡πå (Structural Analysis)")
        self.structural_cb.setChecked(True)
        self.metadata_cb = QCheckBox("‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå Metadata")
        self.metadata_cb.setChecked(True)

        layout.addWidget(self.statistical_cb)
        layout.addWidget(self.structural_cb)
        layout.addWidget(self.metadata_cb)
        layout.addWidget(
            self._create_info_label(
                "‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÑ‡∏î‡πâ‡∏´‡∏•‡∏≤‡∏¢‡πÄ‡∏ó‡∏Ñ‡∏ô‡∏¥‡∏Ñ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏à‡∏≤‡∏∞‡∏•‡∏∂‡∏Å‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ú‡∏¥‡∏î‡∏õ‡∏Å‡∏ï‡∏¥ ‡∏ó‡∏∏‡∏Å‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏õ‡∏£‡∏±‡∏ö‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÑ‡∏î‡πâ"
            )
        )
        return group

    def _create_action_section(self) -> QWidget:
        wrapper = QWidget()
        layout = QHBoxLayout(wrapper)
        layout.addStretch()
        self.analyze_button = QPushButton("üöÄ ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå")
        self.analyze_button.setEnabled(False)
        self.analyze_button.clicked.connect(self._start_analysis)
        layout.addWidget(self.analyze_button)
        return wrapper

    def _create_log_group(self) -> QGroupBox:
        group = QGroupBox("3. Log ‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏™‡∏î")
        layout = QVBoxLayout(group)
        layout.setSpacing(10)
        self.live_log = QPlainTextEdit()
        self.live_log.setReadOnly(True)
        self.live_log.setObjectName("liveLogConsole")
        self.live_log.setStyleSheet(
            "QPlainTextEdit#liveLogConsole {"
            "background-color: #111827;"
            "color: #d1d5db;"
            "font-family: 'JetBrains Mono', monospace;"
            "padding: 12px;"
            "border-radius: 6px;"
            "}"
        )
        self.live_log.setPlaceholderText("Awaiting analysis to start...")
        self.live_log.setFixedHeight(260)
        layout.addWidget(self.live_log)
        return group

    def _create_summary_group(self) -> QGroupBox:
        group = QGroupBox("4. ‡∏™‡∏£‡∏∏‡∏õ‡∏ú‡∏•‡πÅ‡∏•‡∏∞‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥")
        layout = QVBoxLayout(group)
        layout.setSpacing(12)

        self.summary_container = QFrame()
        self.summary_container.setObjectName("summaryContainer")
        self.summary_container.setStyleSheet(
            "QFrame#summaryContainer {"
            "background-color: #f3f4f6;"
            "border: 1px solid #d1d5db;"
            "border-radius: 8px;"
            "padding: 16px;"
            "}"
        )
        summary_layout = QVBoxLayout(self.summary_container)
        summary_layout.setSpacing(10)

        self.summary_title = QLabel("‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå")
        self.summary_title.setObjectName("summaryTitle")
        self.summary_title.setStyleSheet("font-weight: bold; font-size: 15px;")
        self.summary_message = QLabel("‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÑ‡∏ü‡∏•‡πå‡πÅ‡∏•‡πâ‡∏ß‡∏Å‡∏î‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏î‡∏π‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡πÇ‡∏î‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î")
        self.summary_message.setWordWrap(True)

        summary_layout.addWidget(self.summary_title)
        summary_layout.addWidget(self.summary_message)

        self.risk_score_widget = RiskScoreWidget()
        summary_layout.addWidget(self.risk_score_widget)

        self.analysis_table = QTableWidget(0, 3)
        self.analysis_table.setHorizontalHeaderLabels(["Technique", "Result", "Confidence"])
        self.analysis_table.horizontalHeader().setSectionResizeMode(QHeaderView.Stretch)
        self.analysis_table.verticalHeader().setVisible(False)
        self.analysis_table.setEditTriggers(QTableWidget.NoEditTriggers)
        self.analysis_table.setSelectionMode(QTableWidget.NoSelection)
        summary_layout.addWidget(self.analysis_table)

        layout.addWidget(self.summary_container)

        self.guidance_frame = QFrame()
        self.guidance_frame.setObjectName("guidanceFrame")
        self.guidance_frame.setStyleSheet(
            "QFrame#guidanceFrame {"
            "background-color: #eef2ff;"
            "border-left: 4px solid #4f46e5;"
            "padding: 12px;"
            "border-radius: 4px;"
            "}"
        )
        guidance_layout = QVBoxLayout(self.guidance_frame)
        guidance_layout.setContentsMargins(8, 4, 8, 4)
        self.guidance_title = QLabel("‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥ (Actionable Guidance)")
        self.guidance_title.setStyleSheet("font-weight: bold; color: #3730a3;")
        self.guidance_label = QLabel("‡∏à‡∏∞‡∏õ‡∏£‡∏≤‡∏Å‡∏è‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå")
        self.guidance_label.setWordWrap(True)
        guidance_layout.addWidget(self.guidance_title)
        guidance_layout.addWidget(self.guidance_label)
        layout.addWidget(self.guidance_frame)

        self.guidance_frame.setVisible(False)
        return group

    # ------------------------------------------------------------------
    # Event handlers and worker integration
    # ------------------------------------------------------------------
    def _set_media_type(self, media_type: str) -> None:
        self.selected_media_type = media_type
        for key, button in self.media_type_buttons.items():
            button.blockSignals(True)
            button.setChecked(key == media_type)
            button.blockSignals(False)

        if hasattr(self, "file_input"):
            placeholder = self.media_type_placeholders.get(media_type)
            if placeholder:
                self.file_input.setPlaceholderText(placeholder)

        support_text = self.media_type_supports.get(media_type)
        if support_text and hasattr(self, "support_label"):
            self.support_label.setText(support_text)

    def _create_info_label(self, text: str) -> QLabel:
        label = QLabel(text)
        label.setObjectName("infoBox")
        label.setWordWrap(True)
        return label

    def _browse_file(self) -> None:
        filename, _ = QFileDialog.getOpenFileName(
            self,
            "‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÑ‡∏ü‡∏•‡πå‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå",
            "",
            self.media_type_filters[self.selected_media_type],
        )
        if filename:
            self.file_path = Path(filename)
            self.file_input.setText(filename)
            if self.selected_media_type == "image":
                pixmap = QPixmap(filename)
                if not pixmap.isNull():
                    self.risk_score_widget.desc_label.setText(
                        f"‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡πÑ‡∏ü‡∏•‡πå: {self.file_path.name}"
                    )
            self.analyze_button.setEnabled(True)

    def _start_analysis(self) -> None:
        if not self.file_path:
            QMessageBox.warning(self, "‡∏Ñ‡∏≥‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô", "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏µ‡πà‡∏à‡∏∞‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå")
            return

        self._reset_summary()
        self.live_log.clear()
        self._append_log("‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏Å‡∏£‡∏∞‡∏ö‡∏ß‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏û‡∏¥‡∏™‡∏π‡∏à‡∏ô‡πå‡πÑ‡∏ü‡∏•‡πå", level="info")
        self._append_log(f"‡πÑ‡∏ü‡∏•‡πå: {self.file_path.name}", level="info")

        self.active_checks = {
            "statistical": self.statistical_cb.isChecked(),
            "structural": self.structural_cb.isChecked(),
            "metadata": self.metadata_cb.isChecked(),
        }

        methods = self._resolve_methods()
        params = {
            "file_path": str(self.file_path),
            "methods": methods,
        }

        if self.active_checks.get("statistical"):
            self._append_log("‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏ó‡∏≤‡∏á‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥ (Chi-Square, RS, Histogram)", level="running")
        if self.active_checks.get("structural"):
            self._append_log("‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÇ‡∏Ñ‡∏£‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÑ‡∏ü‡∏•‡πå (EOF, Chunk Integrity)", level="running")
        if self.active_checks.get("metadata"):
            self._append_log("‡∏£‡∏ß‡∏ö‡∏£‡∏ß‡∏°‡πÄ‡∏°‡∏ó‡∏≤‡∏î‡∏≤‡∏ó‡∏≤‡πÅ‡∏•‡∏∞‡πÅ‡∏ó‡πá‡∏Å‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Ç‡πâ‡∏≠‡∏á", level="running")

        self._set_busy(True)
        self.logger.info("Starting analysis for %s with methods %s", self.file_path, methods)
        self.parent_window.start_worker(
            "analyze",
            params,
            on_result=self._on_analysis_result,
            on_error=self._on_worker_error,
            on_finished=self._on_worker_finished,
        )

        worker = getattr(self.parent_window, "worker", None)
        if worker is not None:
            worker.status.connect(self._on_worker_status)

    def _resolve_methods(self) -> List[str]:
        methods: List[str] = []
        if self.active_checks.get("statistical"):
            methods.extend(["chi-square", "histogram"])
        if self.active_checks.get("structural"):
            methods.append("ela")
        if self.active_checks.get("metadata"):
            methods.append("ml")
        if not methods:
            methods = ["all"]
        seen = set()
        ordered: List[str] = []
        for method in methods:
            if method not in seen:
                ordered.append(method)
                seen.add(method)
        return ordered

    def _on_worker_status(self, message: str) -> None:
        self._append_log(message, level="status")

    def _on_analysis_result(self, result: Dict[str, object]) -> None:
        self._append_log("‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡πÄ‡∏ä‡∏¥‡∏á‡∏•‡∏∂‡∏Å‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏°‡∏ö‡∏π‡∏£‡∏ì‡πå", level="result")

        details = result.get("details", {}) if isinstance(result, dict) else {}
        if not isinstance(details, dict):
            details = {}

        score = self._safe_float(result.get("score", 0.0))
        level = str(result.get("level", "LOW")).upper()
        confidence = self._safe_float(result.get("confidence", 0.0))
        suspected_method = str(result.get("suspected_method", "‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ß‡∏¥‡∏ò‡∏µ‡∏Å‡∏≤‡∏£‡∏ã‡πà‡∏≠‡∏ô‡∏ó‡∏µ‡πà‡∏ä‡∏±‡∏î‡πÄ‡∏à‡∏ô"))
        suspicious = bool(result.get("suspicious", False))
        insights = result.get("insights", []) if isinstance(result, dict) else []
        recommendation = str(result.get("recommendation", ""))

        description = self._build_score_description(score, level, suspected_method, confidence)
        palette = self._summary_palette(level, suspicious)
        self._apply_summary_palette(palette)
        self.summary_title.setText(palette["title"])
        self.summary_message.setText(description)

        self.risk_score_widget.set_score(int(round(score)), level, description, palette["accent"])

        rows: List[Tuple[str, str, str]] = []
        rows.extend(self._build_statistical_rows(details))

        structural_info = (
            self._perform_structural_scan(self.file_path)
            if self.active_checks.get("structural")
            else None
        )
        metadata_info = (
            self._perform_metadata_scan(self.file_path)
            if self.active_checks.get("metadata")
            else None
        )

        if structural_info:
            rows.append(
                (
                    "Structural Analysis",
                    structural_info["result"],
                    structural_info["confidence"],
                )
            )
            if structural_info.get("log"):
                self._append_log(
                    structural_info["log"], level=structural_info.get("log_level", "result")
                )

        if metadata_info:
            rows.append(
                (
                    "Metadata Review",
                    metadata_info["result"],
                    metadata_info["confidence"],
                )
            )
            if metadata_info.get("log"):
                self._append_log(
                    metadata_info["log"], level=metadata_info.get("log_level", "result")
                )

        self._populate_table(rows)

        guidance_messages = self._build_guidance(
            recommendation,
            suspected_method,
            details,
            structural_info,
            metadata_info,
        )
        if guidance_messages:
            self.guidance_label.setText(
                "<ul>" + "".join(f"<li>{msg}</li>" for msg in guidance_messages) + "</ul>"
            )
            self.guidance_frame.setVisible(True)
        else:
            self.guidance_label.setText("‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡πÄ‡∏™‡∏ô‡∏≠‡πÅ‡∏ô‡∏∞‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°")
            self.guidance_frame.setVisible(False)

        if insights:
            for insight in insights:
                self._append_log(insight, level="insight")

        self.logger.info(
            "Analysis finished for %s -> score %.2f (%s) | suspected=%s | confidence=%.2f",
            self.file_path,
            score,
            level,
            suspected_method,
            confidence,
        )

    def _populate_table(self, rows: Iterable[Tuple[str, str, str]]) -> None:
        rows_list = list(rows)
        self.analysis_table.setRowCount(len(rows_list))
        for row_index, (technique, result_text, confidence) in enumerate(rows_list):
            for column_index, value in enumerate((technique, result_text, confidence)):
                item = QTableWidgetItem(value)
                item.setFlags(item.flags() ^ Qt.ItemIsEditable)
                if column_index == 2:
                    item.setTextAlignment(Qt.AlignCenter)
                self.analysis_table.setItem(row_index, column_index, item)

    def _build_statistical_rows(self, details: Dict[str, float]) -> List[Tuple[str, str, str]]:
        rows: List[Tuple[str, str, str]] = []
        mapping = {
            "chi_square": "Chi-Square Test",
            "histogram": "Histogram Analysis",
            "ela": "Error Level Analysis",
            "ml": "ML Detector",
        }
        for key, label in mapping.items():
            if key not in details:
                continue
            score = self._safe_float(details.get(key, 0.0))
            status, confidence = self._describe_score(score)
            rows.append((label, status, confidence))
        return rows

    def _build_guidance(
        self,
        recommendation: str,
        suspected_method: str,
        details: Dict[str, float],
        structural_info: Optional[Dict[str, str]],
        metadata_info: Optional[Dict[str, str]],
    ) -> List[str]:
        guidance: List[str] = []
        if recommendation:
            guidance.append(recommendation)

        chi_score = self._safe_float(details.get("chi_square", 0.0))
        histogram_score = self._safe_float(details.get("histogram", 0.0))
        ela_score = self._safe_float(details.get("ela", 0.0))
        ml_score = self._safe_float(details.get("ml", 0.0))

        if chi_score >= 60 or histogram_score >= 60:
            guidance.append(
                "‡∏£‡πà‡∏≠‡∏á‡∏£‡∏≠‡∏¢‡∏ó‡∏≤‡∏á‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏ä‡∏µ‡πâ‡∏ñ‡∏∂‡∏á‡πÄ‡∏ó‡∏Ñ‡∏ô‡∏¥‡∏Ñ LSB/LSP ‡πÉ‡∏´‡πâ‡∏•‡∏≠‡∏á‡πÅ‡∏ó‡πá‡∏ö 'Extract' ‡∏î‡πâ‡∏ß‡∏¢‡∏ß‡∏¥‡∏ò‡∏µ 'LSB Matching' ‡∏´‡∏£‡∏∑‡∏≠ 'PVD'"
            )
        if ela_score >= 60:
            guidance.append(
                "ELA ‡∏™‡∏π‡∏á‡∏ú‡∏¥‡∏î‡∏õ‡∏Å‡∏ï‡∏¥: ‡∏´‡∏≤‡∏Å‡πÑ‡∏ü‡∏•‡πå‡πÄ‡∏õ‡πá‡∏ô JPEG ‡πÉ‡∏´‡πâ‡∏ó‡∏î‡∏•‡∏≠‡∏á‡∏ñ‡∏≠‡∏î‡∏î‡πâ‡∏ß‡∏¢‡∏ß‡∏¥‡∏ò‡∏µ 'Transform Domain' ‡∏´‡∏£‡∏∑‡∏≠‡∏ó‡∏≥ Neutralize ‡∏Å‡πà‡∏≠‡∏ô"
            )
        if ml_score >= 60:
            guidance.append(
                "‡∏ï‡∏±‡∏ß‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö ML ‡∏£‡∏∞‡∏ö‡∏∏‡∏™‡∏±‡∏ç‡∏ç‡∏≤‡∏ì‡∏Ç‡∏±‡πâ‡∏ô‡∏™‡∏π‡∏á ‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡πÉ‡∏´‡πâ‡∏£‡∏±‡∏ô Extract ‡∏î‡πâ‡∏ß‡∏¢‡πÇ‡∏´‡∏°‡∏î Adaptive ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ï‡∏£‡∏ß‡∏à‡∏ã‡πâ‡∏≥"
            )

        if structural_info and structural_info.get("status") == "alert":
            guidance.append(
                "‡∏ï‡∏£‡∏ß‡∏à‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡πà‡∏≠‡∏ó‡πâ‡∏≤‡∏¢‡πÑ‡∏ü‡∏•‡πå ‡∏•‡∏≠‡∏á‡πÉ‡∏ä‡πâ‡πÅ‡∏ó‡πá‡∏ö 'Extract' ‡∏Å‡∏±‡∏ö‡πÄ‡∏ó‡∏Ñ‡∏ô‡∏¥‡∏Ñ 'Tail Append' ‡∏´‡∏£‡∏∑‡∏≠‡∏™‡∏Ñ‡∏£‡∏¥‡∏õ‡∏ï‡πå forensic"
            )
        if metadata_info and metadata_info.get("status") == "alert":
            guidance.append(
                "Metadata ‡∏ú‡∏¥‡∏î‡∏õ‡∏Å‡∏ï‡∏¥ ‡∏≠‡∏≤‡∏à‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ã‡πà‡∏≠‡∏ô‡πÉ‡∏ô EXIF/ID3 ‡πÉ‡∏´‡πâ‡πÉ‡∏ä‡πâ Extract > Metadata Inspector ‡∏´‡∏£‡∏∑‡∏≠‡∏ó‡∏≥ Neutralize"
            )

        if suspected_method and "‡πÑ‡∏°‡πà‡∏û‡∏ö" not in suspected_method:
            guidance.append(f"‡∏Ñ‡∏≤‡∏î‡∏ß‡πà‡∏≤‡πÉ‡∏ä‡πâ‡∏ß‡∏¥‡∏ò‡∏µ: {suspected_method}")

        seen = set()
        unique_guidance = []
        for message in guidance:
            if message and message not in seen:
                unique_guidance.append(message)
                seen.add(message)
        return unique_guidance

    def _perform_structural_scan(self, file_path: Optional[Path]) -> Optional[Dict[str, str]]:
        if not file_path or not file_path.exists():
            return None
        info: Dict[str, str] = {
            "result": "‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö",
            "confidence": "‚Äî",
            "status": "neutral",
        }
        suffix = file_path.suffix.lower()
        try:
            data = file_path.read_bytes()
            if suffix == ".png":
                marker = data.rfind(b"IEND\xAE\x42\x60\x82")
                if marker != -1 and marker + 12 < len(data):
                    extra = len(data) - (marker + 12)
                    info.update(
                        {
                            "result": f"‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡πà‡∏≠‡∏ó‡πâ‡∏≤‡∏¢‡πÑ‡∏ü‡∏•‡πå ~{extra} ‡πÑ‡∏ö‡∏ï‡πå‡∏´‡∏•‡∏±‡∏á IEND",
                            "confidence": "92%",
                            "status": "alert",
                            "log": "[RESULT] EOF: ‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡πà‡∏≠‡∏ó‡πâ‡∏≤‡∏¢‡∏´‡∏•‡∏±‡∏á IEND",
                            "log_level": "warning",
                        }
                    )
                else:
                    info.update(
                        {
                            "result": "‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡πà‡∏≠‡∏ó‡πâ‡∏≤‡∏¢‡πÑ‡∏ü‡∏•‡πå",
                            "confidence": "35%",
                            "log": "[RESULT] EOF: ‡πÇ‡∏Ñ‡∏£‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á PNG ‡∏õ‡∏Å‡∏ï‡∏¥",
                            "log_level": "result",
                        }
                    )
            elif suffix in {".jpg", ".jpeg"}:
                marker = data.rfind(b"\xFF\xD9")
                if marker != -1 and marker + 2 < len(data):
                    extra = len(data) - (marker + 2)
                    info.update(
                        {
                            "result": f"‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡πà‡∏≠‡∏ó‡πâ‡∏≤‡∏¢‡πÑ‡∏ü‡∏•‡πå ~{extra} ‡πÑ‡∏ö‡∏ï‡πå‡∏´‡∏•‡∏±‡∏á FFD9",
                            "confidence": "88%",
                            "status": "alert",
                            "log": "[RESULT] EOF: ‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏´‡∏•‡∏±‡∏á JPEG EOI",
                            "log_level": "warning",
                        }
                    )
                else:
                    info.update(
                        {
                            "result": "‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡πà‡∏≠‡∏ó‡πâ‡∏≤‡∏¢‡πÑ‡∏ü‡∏•‡πå",
                            "confidence": "35%",
                            "log": "[RESULT] EOF: ‡πÇ‡∏Ñ‡∏£‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á JPEG ‡∏õ‡∏Å‡∏ï‡∏¥",
                            "log_level": "result",
                        }
                    )
            else:
                info.update(
                    {
                        "result": "‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏™‡∏π‡∏ï‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡πÑ‡∏ü‡∏•‡πå‡∏ä‡∏ô‡∏¥‡∏î‡∏ô‡∏µ‡πâ",
                        "confidence": "‚Äî",
                        "log": "[INFO] Structural analysis ‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡πÄ‡∏â‡∏û‡∏≤‡∏∞ PNG/JPEG ‡∏ì ‡∏Ç‡∏ì‡∏∞‡∏ô‡∏µ‡πâ",
                        "log_level": "info",
                    }
                )
        except Exception as exc:  # pragma: no cover - IO failure
            self.logger.warning("Structural scan failed: %s", exc)
            info.update(
                {
                    "result": "‡πÇ‡∏Ñ‡∏£‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à",
                    "confidence": "‚Äî",
                    "status": "error",
                    "log": "[ERROR] Structural scan ‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à",
                    "log_level": "error",
                }
            )
        return info

    def _perform_metadata_scan(self, file_path: Optional[Path]) -> Optional[Dict[str, str]]:
        if not file_path or not file_path.exists():
            return None
        info: Dict[str, str] = {
            "result": "‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö",
            "confidence": "‚Äî",
            "status": "neutral",
        }
        suffix = file_path.suffix.lower()
        try:
            if suffix in {".png", ".jpg", ".jpeg", ".tiff", ".bmp"}:
                with Image.open(file_path) as img:
                    metadata = img.getexif() if hasattr(img, "getexif") else {}
                    if metadata:
                        info.update(
                            {
                                "result": f"‡∏û‡∏ö EXIF/Metadata {len(metadata)} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£",
                                "confidence": "68%",
                                "status": "alert",
                                "log": "[RESULT] Metadata: ‡∏ï‡∏£‡∏ß‡∏à‡∏û‡∏ö EXIF ‡∏´‡∏•‡∏≤‡∏¢‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£",
                                "log_level": "warning",
                            }
                        )
                    else:
                        info.update(
                            {
                                "result": "‡πÑ‡∏°‡πà‡∏û‡∏ö Metadata ‡∏ó‡∏µ‡πà‡∏ú‡∏¥‡∏î‡∏õ‡∏Å‡∏ï‡∏¥",
                                "confidence": "30%",
                                "log": "[RESULT] Metadata: ‡πÑ‡∏°‡πà‡∏û‡∏ö EXIF",
                                "log_level": "result",
                            }
                        )
            else:
                info.update(
                    {
                        "result": "‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏ï‡∏±‡∏ß‡∏≠‡πà‡∏≤‡∏ô‡πÄ‡∏°‡∏ó‡∏≤‡∏î‡∏≤‡∏ó‡∏≤‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÑ‡∏ü‡∏•‡πå‡∏ä‡∏ô‡∏¥‡∏î‡∏ô‡∏µ‡πâ",
                        "confidence": "‚Äî",
                        "log": "[INFO] Metadata analysis ‡∏à‡∏≥‡∏Å‡∏±‡∏î‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡πÑ‡∏ü‡∏•‡πå‡∏†‡∏≤‡∏û",
                        "log_level": "info",
                    }
                )
        except Exception as exc:  # pragma: no cover - IO failure
            self.logger.warning("Metadata scan failed: %s", exc)
            info.update(
                {
                    "result": "‡∏≠‡πà‡∏≤‡∏ô Metadata ‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à",
                    "confidence": "‚Äî",
                    "status": "error",
                    "log": "[ERROR] Metadata scan ‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à",
                    "log_level": "error",
                }
            )
        return info

    # ------------------------------------------------------------------
    # Helpers
    # ------------------------------------------------------------------
    def _safe_float(self, value: object) -> float:
        try:
            return float(value)
        except (TypeError, ValueError):
            return 0.0

    def _describe_score(self, score: float) -> Tuple[str, str]:
        if score >= 70:
            return ("‡∏û‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ú‡∏¥‡∏î‡∏õ‡∏Å‡∏ï‡∏¥‡∏™‡∏π‡∏á", f"{score:.0f}%")
        if score >= 40:
            return ("‡∏ô‡πà‡∏≤‡∏™‡∏á‡∏™‡∏±‡∏¢", f"{score:.0f}%")
        return ("‡∏õ‡∏Å‡∏ï‡∏¥", f"{score:.0f}%")

    def _summary_palette(self, level: str, suspicious: bool) -> Dict[str, str]:
        palette = {
            "LOW": {
                "bg": "#e8f5e9",
                "border": "#a5d6a7",
                "fg": "#1b5e20",
                "accent": "#2e7d32",
                "title": "‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå: ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏£‡πà‡∏≠‡∏á‡∏£‡∏≠‡∏¢‡∏Å‡∏≤‡∏£‡∏ã‡πà‡∏≠‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•",
            },
            "MEDIUM": {
                "bg": "#fff8e1",
                "border": "#ffe082",
                "fg": "#ff8f00",
                "accent": "#ff9800",
                "title": "‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå: ‡∏û‡∏ö‡∏à‡∏∏‡∏î‡∏ó‡∏µ‡πà‡∏ô‡πà‡∏≤‡∏™‡∏á‡∏™‡∏±‡∏¢",
            },
            "HIGH": {
                "bg": "#ffebee",
                "border": "#ef9a9a",
                "fg": "#c62828",
                "accent": "#f44336",
                "title": "‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå: ‡∏°‡∏µ‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏õ‡πá‡∏ô‡πÑ‡∏õ‡πÑ‡∏î‡πâ‡∏™‡∏π‡∏á‡∏ß‡πà‡∏≤‡∏à‡∏∞‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏ã‡πà‡∏≠‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•",
            },
            "CRITICAL": {
                "bg": "#ffebee",
                "border": "#ef5350",
                "fg": "#b71c1c",
                "accent": "#d32f2f",
                "title": "‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå: ‡∏ï‡∏£‡∏ß‡∏à‡∏û‡∏ö‡∏£‡πà‡∏≠‡∏á‡∏£‡∏≠‡∏¢‡∏ä‡∏±‡∏î‡πÄ‡∏à‡∏ô",
            },
        }
        default_palette = {
            "bg": "#f3f4f6",
            "border": "#d1d5db",
            "fg": "#111827",
            "accent": "#1976d2",
            "title": "‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå: ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏£‡∏∞‡∏ö‡∏∏‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏™‡∏µ‡πà‡∏¢‡∏á",
        }
        selected = palette.get(level, default_palette)
        if suspicious and level == "LOW":
            selected = palette.get("MEDIUM", default_palette)
        return selected

    def _apply_summary_palette(self, palette: Dict[str, str]) -> None:
        self.summary_container.setStyleSheet(
            "QFrame#summaryContainer {"
            f"background-color: {palette['bg']};"
            f"border: 1px solid {palette['border']};"
            "border-radius: 8px;"
            "padding: 16px;"
            "}"
        )
        self.summary_title.setStyleSheet(
            f"font-weight: bold; font-size: 15px; color: {palette['fg']};"
        )
        self.summary_message.setStyleSheet(f"color: {palette['fg']};")

    def _build_score_description(
        self, score: float, level: str, suspected_method: str, confidence: float
    ) -> str:
        parts = [f"‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏£‡∏ß‡∏° {score:.0f}/100 ({level})"]
        if confidence:
            parts.append(f"‡∏Ñ‡∏ß‡∏≤‡∏°‡∏°‡∏±‡πà‡∏ô‡πÉ‡∏à‡∏Ç‡∏≠‡∏á‡πÇ‡∏°‡∏î‡∏π‡∏•‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå ~{confidence:.0f}%")
        if suspected_method and "‡πÑ‡∏°‡πà‡∏û‡∏ö" not in suspected_method:
            parts.append(f"‡∏Ñ‡∏≤‡∏î‡∏ß‡πà‡∏≤‡∏ß‡∏¥‡∏ò‡∏µ‡∏Å‡∏≤‡∏£‡∏ã‡πà‡∏≠‡∏ô: {suspected_method}")
        else:
            parts.append("‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏Å‡∏≤‡∏£‡∏ã‡πà‡∏≠‡∏ô‡∏ó‡∏µ‡πà‡πÅ‡∏ô‡πà‡∏ä‡∏±‡∏î")
        return " ‚Ä¢ ".join(parts)

    def _append_log(self, message: str, *, level: str = "info") -> None:
        timestamp = datetime.datetime.now().strftime("%H:%M:%S")
        color_map = {
            "info": "#60a5fa",
            "running": "#fbbf24",
            "status": "#c084fc",
            "result": "#22c55e",
            "warning": "#f97316",
            "error": "#f87171",
            "insight": "#38bdf8",
        }
        color = color_map.get(level, "#d1d5db")
        formatted = f"<span style='color:{color}'>[{timestamp}] {message}</span>"
        self.live_log.appendHtml(formatted)
        self.live_log.verticalScrollBar().setValue(self.live_log.verticalScrollBar().maximum())

    def _reset_summary(self) -> None:
        self.summary_title.setText("‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‚Ä¶")
        self.summary_message.setText("‡∏£‡∏∞‡∏ö‡∏ö‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏£‡∏ß‡∏ö‡∏£‡∏ß‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å‡πÇ‡∏°‡∏î‡∏π‡∏•‡∏ï‡πà‡∏≤‡∏á ‡πÜ")
        self.analysis_table.clearContents()
        self.analysis_table.setRowCount(0)
        self.guidance_frame.setVisible(False)
        self.risk_score_widget.set_score(0, "ANALYZING", "‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•", "#1E88E5")

    # ------------------------------------------------------------------
    # Worker callbacks
    # ------------------------------------------------------------------
    def _on_worker_error(self, error: str) -> None:
        self._append_log(f"‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: {error}", level="error")
        QMessageBox.critical(self, "‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î", f"‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß:\n{error}")
        self.logger.error("Analysis failed for %s: %s", self.file_path, error)
        self._set_busy(False)

    def _on_worker_finished(self) -> None:
        self._set_busy(False)

    def _set_busy(self, busy: bool) -> None:
        self.analyze_button.setEnabled(not busy)
        self.analyze_button.setText("‚è≥ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå..." if busy else "üöÄ ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á")
