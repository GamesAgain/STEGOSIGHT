"""Neutralize tab implementation for the STEGOSIGHT GUI."""

from __future__ import annotations

from pathlib import Path
from typing import Dict, List, Optional

from PyQt5.QtCore import Qt
from PyQt5.QtGui import QPixmap
from PyQt5.QtWidgets import (
    QFileDialog,
    QGroupBox,
    QHBoxLayout,
    QLabel,
    QLineEdit,
    QMessageBox,
    QPushButton,
    QScrollArea,
    QSplitter,
    QVBoxLayout,
    QWidget,
    QCheckBox,
    QComboBox,
)

from .common_widgets import InfoPanel, RiskScoreWidget


class NeutralizeTab(QWidget):
    """UI for the *Neutralize* functionality."""

    def __init__(self, parent=None) -> None:
        super().__init__(parent)
        self.parent_window = parent
        self.file_path: Optional[Path] = None
        self._last_output_path: Optional[str] = None
        self._init_ui()

    def _init_ui(self) -> None:
        main_layout = QVBoxLayout(self)
        scroll = QScrollArea()
        scroll.setWidgetResizable(True)
        container = QWidget()
        container_layout = QVBoxLayout(container)

        top_splitter = QSplitter(Qt.Horizontal)

        left_widget = QWidget()
        left_layout = QVBoxLayout(left_widget)
        left_layout.addWidget(self._create_file_group())
        left_layout.addWidget(self._create_methods_group())
        left_layout.addWidget(self._create_options_group())
        left_layout.addStretch()
        top_splitter.addWidget(left_widget)

        right_widget = QWidget()
        right_layout = QVBoxLayout(right_widget)
        right_layout.addWidget(self._create_preview_group())
        right_layout.addWidget(self._create_processing_group())
        right_layout.addStretch()
        top_splitter.addWidget(right_widget)

        top_splitter.setStretchFactor(0, 60)
        top_splitter.setStretchFactor(1, 40)
        container_layout.addWidget(top_splitter)

        self.action_btn = QPushButton("üõ°Ô∏è ‡∏ó‡∏≥‡πÉ‡∏´‡πâ‡πÄ‡∏õ‡πá‡∏ô‡∏Å‡∏•‡∏≤‡∏á")
        self.action_btn.setObjectName("actionButton")
        self.action_btn.clicked.connect(self._start_neutralize)
        container_layout.addWidget(self.action_btn, 0, Qt.AlignRight)

        results_group = QGroupBox("‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•")
        results_layout = QVBoxLayout(results_group)

        comparison_layout = QHBoxLayout()
        before_card, before_widget = self._create_comparison_card("‡∏Å‡πà‡∏≠‡∏ô", 42, "MEDIUM", "#FF9800")
        after_card, after_widget = self._create_comparison_card("‡∏´‡∏•‡∏±‡∏á", 10, "LOW", "#4CAF50")
        self.before_risk_widget = before_widget
        self.after_risk_widget = after_widget
        comparison_layout.addWidget(before_card)
        comparison_layout.addWidget(after_card)
        results_layout.addLayout(comparison_layout)

        summary_panel, labels = self._create_info_panel(
            ["‚úì Metadata Stripped", "‚úì Re-compressed", "‚úì Resized", "Risk Score ‡∏•‡∏î‡∏•‡∏á"]
        )
        self.summary_panel = summary_panel
        self.summary_labels = labels
        results_layout.addWidget(summary_panel)

        self.success_box = self._create_success_box()
        self.success_box.setVisible(False)
        results_layout.addWidget(self.success_box)

        container_layout.addWidget(results_group)
        scroll.setWidget(container)
        main_layout.addWidget(scroll)

    def _create_file_group(self) -> QGroupBox:
        group = QGroupBox("1. ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏µ‡πà‡∏à‡∏∞‡∏ó‡∏≥‡πÉ‡∏´‡πâ‡πÄ‡∏õ‡πá‡∏ô‡∏Å‡∏•‡∏≤‡∏á")
        layout = QVBoxLayout(group)
        row = QHBoxLayout()
        self.file_input = QLineEdit()
        self.file_input.setPlaceholderText("‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÑ‡∏ü‡∏•‡πå‡∏†‡∏≤‡∏û...")
        self.file_input.setReadOnly(True)
        browse_btn = QPushButton("‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÑ‡∏ü‡∏•‡πå")
        browse_btn.clicked.connect(self._browse_file)
        row.addWidget(self.file_input)
        row.addWidget(browse_btn)
        layout.addLayout(row)
        layout.addWidget(self._create_info_box("‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö: PNG, JPEG, BMP, etc."))
        return group

    def _create_methods_group(self) -> QGroupBox:
        group = QGroupBox("2. ‡∏ß‡∏¥‡∏ò‡∏µ‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡πÉ‡∏´‡πâ‡πÄ‡∏õ‡πá‡∏ô‡∏Å‡∏•‡∏≤‡∏á")
        layout = QVBoxLayout(group)
        self.metadata_cb = QCheckBox("Strip EXIF/Metadata - ‡∏•‡∏ö metadata")
        self.metadata_cb.setChecked(True)
        self.recompress_cb = QCheckBox("Re-compress Image - ‡∏ö‡∏µ‡∏ö‡∏≠‡∏±‡∏î‡∏†‡∏≤‡∏û‡∏ã‡πâ‡∏≥")
        self.recompress_cb.setChecked(True)
        self.transform_cb = QCheckBox("Transform (Resize/Noise) - ‡∏õ‡∏£‡∏±‡∏ö‡∏Ç‡∏ô‡∏≤‡∏î/‡πÄ‡∏û‡∏¥‡πà‡∏° noise")
        layout.addWidget(self.metadata_cb)
        layout.addWidget(self.recompress_cb)
        layout.addWidget(self.transform_cb)
        warning_box = self._create_info_box(
            "<b>‡∏Ñ‡∏≥‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô:</b> ‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡πÉ‡∏´‡πâ‡πÄ‡∏õ‡πá‡∏ô‡∏Å‡∏•‡∏≤‡∏á‡∏à‡∏∞‡∏ó‡∏≥‡∏•‡∏≤‡∏¢‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏ã‡πà‡∏≠‡∏ô‡∏≠‡∏¢‡∏π‡πà ‡πÅ‡∏•‡∏∞‡∏≠‡∏≤‡∏à‡∏•‡∏î‡∏Ñ‡∏∏‡∏ì‡∏†‡∏≤‡∏û‡∏†‡∏≤‡∏û"
        )
        warning_box.setStyleSheet(
            warning_box.styleSheet() + "background-color: #fff9c4; border-left-color: #fdd835;"
        )
        layout.addWidget(warning_box)
        return group

    def _create_options_group(self) -> QGroupBox:
        group = QGroupBox("3. ‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏Å‡∏≤‡∏£‡∏ö‡∏µ‡∏ö‡∏≠‡∏±‡∏î")
        layout = QVBoxLayout(group)

        quality_row = QHBoxLayout()
        quality_row.addWidget(QLabel("‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏Ñ‡∏∏‡∏ì‡∏†‡∏≤‡∏û:"))
        self.quality_combo = QComboBox()
        self.quality_combo.addItems(["‡∏™‡∏π‡∏á (95%)", "‡∏õ‡∏≤‡∏ô‡∏Å‡∏•‡∏≤‡∏á (85%)", "‡∏ï‡πà‡∏≥ (75%)"])
        self.quality_combo.setCurrentIndex(1)
        quality_row.addWidget(self.quality_combo)

        resize_row = QHBoxLayout()
        resize_row.addWidget(QLabel("‡∏Ç‡∏ô‡∏≤‡∏î‡∏†‡∏≤‡∏û:"))
        self.resize_combo = QComboBox()
        self.resize_combo.addItems(["‡πÑ‡∏°‡πà‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á", "‡∏•‡∏î 10%", "‡∏•‡∏î 20%", "‡∏•‡∏î 30%"])
        self.resize_combo.setCurrentIndex(2)
        resize_row.addWidget(self.resize_combo)

        layout.addLayout(quality_row)
        layout.addLayout(resize_row)
        return group

    def _create_preview_group(self) -> QGroupBox:
        group = QGroupBox("‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡πÑ‡∏ü‡∏•‡πå")
        layout = QVBoxLayout(group)
        self.preview_label = QLabel("‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÑ‡∏ü‡∏•‡πå")
        self.preview_label.setAlignment(Qt.AlignCenter)
        self.preview_label.setMinimumHeight(200)
        self.preview_label.setObjectName("previewArea")
        layout.addWidget(self.preview_label)
        return group

    def _create_processing_group(self) -> QGroupBox:
        group = QGroupBox("‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•")
        layout = QVBoxLayout(group)
        panel, labels = self._create_info_panel(
            ["‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞", "‡∏Ç‡∏ô‡∏≤‡∏î‡πÑ‡∏ü‡∏•‡πå‡πÄ‡∏î‡∏¥‡∏°", "‡∏Ç‡∏ô‡∏≤‡∏î‡πÑ‡∏ü‡∏•‡πå‡πÉ‡∏´‡∏°‡πà (‡∏Ñ‡∏≤‡∏î‡∏Å‡∏≤‡∏£‡∏ì‡πå)", "‡πÄ‡∏ß‡∏•‡∏≤‡πÇ‡∏î‡∏¢‡∏õ‡∏£‡∏∞‡∏°‡∏≤‡∏ì"]
        )
        self.processing_panel = panel
        self.processing_labels = labels
        layout.addWidget(panel)
        return group

    def _create_comparison_card(self, title_prefix: str, score: int, level: str, color: str):
        card = QWidget()
        card.setObjectName("comparisonCard")
        layout = QVBoxLayout(card)
        layout.setSpacing(10)

        title = QLabel(f"{title_prefix}‡∏ó‡∏≥‡πÉ‡∏´‡πâ‡πÄ‡∏õ‡πá‡∏ô‡∏Å‡∏•‡∏≤‡∏á")
        title.setAlignment(Qt.AlignCenter)
        title.setStyleSheet("font-weight: bold;")

        preview = QLabel("‡∏†‡∏≤‡∏û‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á")
        preview.setAlignment(Qt.AlignCenter)
        preview.setMinimumHeight(150)
        preview.setObjectName("previewArea")

        risk_widget = RiskScoreWidget()
        risk_widget.set_score(score, level, "", color)

        layout.addWidget(title)
        layout.addWidget(preview)
        layout.addWidget(risk_widget)
        return card, risk_widget

    def _create_success_box(self) -> QWidget:
        box = QWidget()
        box.setObjectName("successBox")
        layout = QVBoxLayout(box)
        msg = QLabel("<b>‚úì ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!</b> ‡πÑ‡∏ü‡∏•‡πå‡∏ñ‡∏π‡∏Å‡∏ó‡∏≥‡πÉ‡∏´‡πâ‡πÄ‡∏õ‡πá‡∏ô‡∏Å‡∏•‡∏≤‡∏á‡πÅ‡∏•‡πâ‡∏ß")
        msg.setWordWrap(True)
        layout.addWidget(msg)
        save_btn = QPushButton("üíæ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÑ‡∏ü‡∏•‡πå")
        save_btn.clicked.connect(self._save_output_file)
        layout.addWidget(save_btn)
        return box

    def _create_info_box(self, text: str) -> QLabel:
        info = QLabel(text)
        info.setWordWrap(True)
        info.setObjectName("infoBox")
        return info

    def _create_info_panel(self, labels):
        panel = InfoPanel(labels)
        return panel, panel.value_labels

    # ------------------------------------------------------------------
    def _browse_file(self) -> None:
        filename, _ = QFileDialog.getOpenFileName(
            self,
            "‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÑ‡∏ü‡∏•‡πå",
            "",
            "Image Files (*.png *.jpg *.jpeg *.bmp);;All Files (*.*)",
        )
        if filename:
            self.file_path = Path(filename)
            self.file_input.setText(filename)
            pixmap = QPixmap(filename)
            if not pixmap.isNull():
                self.preview_label.setPixmap(
                    pixmap.scaled(
                        self.preview_label.size(), Qt.KeepAspectRatio, Qt.SmoothTransformation
                    )
                )
            else:
                self.preview_label.setText(f"‡πÑ‡∏ü‡∏•‡πå: {Path(filename).name}")
            size_kb = self.file_path.stat().st_size / 1024
            self.processing_labels["‡∏Ç‡∏ô‡∏≤‡∏î‡πÑ‡∏ü‡∏•‡πå‡πÄ‡∏î‡∏¥‡∏°"].setText(f"{size_kb:.2f} KB")
            self.processing_labels["‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞"].setText("‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•")
            self.processing_labels["‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞"].setStyleSheet("font-weight: bold; color: #1E88E5;")

    def _start_neutralize(self) -> None:
        if not self.file_path:
            QMessageBox.warning(self, "‡∏Ñ‡∏≥‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô", "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÑ‡∏ü‡∏•‡πå")
            return

        methods: List[str] = []
        if self.metadata_cb.isChecked():
            methods.append("metadata")
        if self.recompress_cb.isChecked():
            methods.append("recompress")
        if self.transform_cb.isChecked():
            methods.append("transform")
        if not methods:
            methods = ["metadata"]

        params = {
            "file_path": str(self.file_path),
            "methods": methods,
            "quality": self.quality_combo.currentText(),
            "resize": self.resize_combo.currentText(),
        }

        self._set_busy(True)
        self.parent_window.start_worker(
            "neutralize",
            params,
            on_result=self._on_neutralize_result,
            on_error=self._on_worker_error,
            on_finished=self._on_worker_finished,
        )

    def _on_neutralize_result(self, result: Dict[str, object]) -> None:
        output_path = result.get("output_path", "")
        used_methods = result.get("methods", [])
        if isinstance(used_methods, list):
            used_methods = [str(m) for m in used_methods]
        else:
            used_methods = []

        # Update summary panel
        self.summary_labels["‚úì Metadata Stripped"].setText("‚úî" if "metadata" in used_methods else "‚Äî")
        self.summary_labels["‚úì Re-compressed"].setText("‚úî" if "recompress" in used_methods else "‚Äî")
        self.summary_labels["‚úì Resized"].setText("‚úî" if "transform" in used_methods else "‚Äî")
        self.summary_labels["Risk Score ‡∏•‡∏î‡∏•‡∏á"].setText("YES" if used_methods else "‚Äî")

        # Update risk widgets with illustrative values
        self.before_risk_widget.set_score(42, "MEDIUM", "‡∏Å‡πà‡∏≠‡∏ô‡∏ó‡∏≥‡πÉ‡∏´‡πâ‡πÄ‡∏õ‡πá‡∏ô‡∏Å‡∏•‡∏≤‡∏á", "#FF9800")
        self.after_risk_widget.set_score(8, "LOW", "‡∏´‡∏•‡∏±‡∏á‡∏ó‡∏≥‡πÉ‡∏´‡πâ‡πÄ‡∏õ‡πá‡∏ô‡∏Å‡∏•‡∏≤‡∏á", "#4CAF50")

        self.processing_labels["‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞"].setText("‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô")
        self.processing_labels["‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞"].setStyleSheet("font-weight: bold; color: #4CAF50;")
        self.processing_labels["‡∏Ç‡∏ô‡∏≤‡∏î‡πÑ‡∏ü‡∏•‡πå‡πÉ‡∏´‡∏°‡πà (‡∏Ñ‡∏≤‡∏î‡∏Å‡∏≤‡∏£‡∏ì‡πå)"].setText("‚Äî")
        self.processing_labels["‡πÄ‡∏ß‡∏•‡∏≤‡πÇ‡∏î‡∏¢‡∏õ‡∏£‡∏∞‡∏°‡∏≤‡∏ì"].setText("‚Äî")

        self.success_box.setVisible(True)
        self._last_output_path = str(output_path)
        QMessageBox.information(self, "‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à", "‡πÑ‡∏ü‡∏•‡πå‡∏ñ‡∏π‡∏Å‡∏ó‡∏≥‡πÉ‡∏´‡πâ‡πÄ‡∏õ‡πá‡∏ô‡∏Å‡∏•‡∏≤‡∏á‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢")

    def _save_output_file(self) -> None:
        path = getattr(self, "_last_output_path", None)
        if not path:
            QMessageBox.warning(self, "‡∏Ñ‡∏≥‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô", "‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÑ‡∏ü‡∏•‡πå‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå")
            return
        QMessageBox.information(self, "‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•", f"‡πÑ‡∏ü‡∏•‡πå‡∏ñ‡∏π‡∏Å‡∏à‡∏±‡∏î‡πÄ‡∏Å‡πá‡∏ö‡πÑ‡∏ß‡πâ‡∏ó‡∏µ‡πà: {path}")

    def _on_worker_error(self, error: str) -> None:
        QMessageBox.critical(self, "‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î", f"Neutralization ‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß:\n{error}")
        self._set_busy(False)

    def _on_worker_finished(self) -> None:
        self._set_busy(False)

    def _set_busy(self, busy: bool) -> None:
        self.action_btn.setEnabled(not busy)
